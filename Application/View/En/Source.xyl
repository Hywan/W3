<?xml version="1.0" encoding="utf-8"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
  <yield id="yContent">
    <h1>Sources</h1>

    <p>Hoa distributes the main following projects:</p>
    <ul>
      <li><code>Central</code>: the set of <strong>all</strong> Hoa libraries,</li>
      <li><code>Library/<em>*</em></code>: isolated <strong>standard</strong> libraries,</li>
      <li><code>Hoathis/<em>*</em></code>: isolated <strong>user</strong>
      libraries (maintained by Hoa).</li>
    </ul>
    <p>There is different ways to install Hoa: <strong>fully</strong> (with
    the central) or <strong>partly</strong> (libraries independently), and
    <strong>widely</strong> (on the system) or <strong>locally</strong> (in an
    application). In the case of a <strong>wide</strong> installation and for
    all systems adopting the
    <a href="http://refspecs.linuxfoundation.org/fhs.shtml">Filesystem Hierarchy
    Standard</a> (at least in the 2.2 version), Hoa will prefer to be installed
    in the <code>/usr/local/lib/Hoa/</code> directory. For other systems, like
    Windows, Hoa will prefer to be installed in the
    <code>C:\Program Files\Hoa\</code>.</p>

    <h2 id="Table_of_contents">Table of contents</h2>

    <tableofcontents id="toc" />

    <h2 id="Dependency_manager_(Composer)" for="toc">Dependency manager
    (Composer)</h2>

    <p><img src="hoa://Application/Public/Image/Logo/Composer.png"
            alt="Logo of Composer" class="fright" />
    To manage dependencies between libraries of Hoa, we recommend the
    <a href="http://getcomposer.org/">Composer</a> tool. All dependencies
    managed by Composer are registered by the
    <a href="https://packagist.org/search/?q=hoa/">Packagist</a> repository
    under the names <code>hoa/<em>library</em></code> and
    <code>hoathis/<em>library</em></code>. Thus, for example, to install the
    <code>Hoa\Websocket</code> library, we will have to write in the
    <code>composer.json</code> file:</p>
    <pre><code class="language-json">{
    "require": {
        "hoa/websocket": "~2.0"
    }
}</code></pre>
    <p>Then, to install dependencies:</p>
    <pre><code class="language-shell">$ composer install</code></pre>
    <p>It is recommended to <a href="https://getcomposer.org/doc/">read the
    documentation of Composer</a> if you are not familiar with this tool.</p>
    <p>To test the installation has succeeded:</p>
    <pre><code class="language-php">&amp;lt;?php

require_once 'vendor/autoload.php';
var_dump(HOA); // bool(true)</code></pre>

    <h2 id="Version_manager_(Git)" for="toc">Version manager (Git)</h2>

    <p><img src="hoa://Application/Public/Image/Logo/Git.png" alt="Logo of Git"
            class="fright" />
    Hoa uses <a href="http://git-scm.com/">Git</a> for all its projects. The
    index of repositories can be found at the address:
    <a href="http://git.hoa-project.net">git.hoa-project.net</a>. Thus to get
    sources of the <code>Central</code> project:</p>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Central.git Hoa.central</code></pre>
    <p>To get a library, for example <code>Hoa\Core</code>:</p>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Library/Core.git Hoa/Core</code></pre>
    <p>It is recommended to <a href="http://git-scm.com/documentation">read the
    documentation of Git</a> if you are not familiar with this tool.</p>
    <p>If you prefer a wide and full installation with the central, without
    neglecting the recommendation about Hoa localisation, you could use a
    symbolic link:</p>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Central.git /usr/local/lib/Hoa.central
$ ln -s /usr/local/lib/Hoa.central/Hoa /usr/local/lib/Hoa</code></pre>
    <p><img src="hoa://Application/Public/Image/Logo/Pikacode.png"
           alt="Logo of Pikacode" class="fright" />
       <img src="hoa://Application/Public/Image/Logo/Github.png"
           alt="Logo of Github" class="fright" />
    Mirrors exist for the majority of projects, notably
    <a href="@github">Github</a> and
    <a href="https://pikacode.com/hoaproject/">Pikacode</a>. Names of projects
    are identical as much as possible. The most important difference is for
    libraries: there is no <code>Library/</code> prefix, or
    <code>Hoathis/</code> is replaced by <code>Hoathis-</code>. Thus:</p>
    <pre><code class="language-shell">$ git clone https://github.com/hoaproject/Core.git</code></pre>
    <p>Mirrors are permanently synchronized, you will never have a
    difference.</p>
    <p>To test the installation has succeeded:</p>
    <pre><code class="language-php">&amp;lt;?php

require_once '/usr/local/lib/Hoa/Core/Core.php';
var_dump(HOA); // bool(true)</code></pre>

    <h2 id="Archives" for="toc">Archives</h2>

    <p>Archives are produced at each updates for some projects. The index of
    archives can be found at the address:
    <a href="http://download.hoa-project.net">download.hoa-project.net</a>.
    The naming is also identical to the one of projects. Several formats are
    available: <code>.zip</code>, <code>.tar.gz</code> and
    <code>.phar</code> (for the <a href="http://php.net/phar">PHP
    archives</a>).</p>
    <p>The WebDAV protocol also allows to access archives at the address:
    <a href="http://dav.hoa-project.net">dav.hoa-project.net</a>.</p>

    <h2 id="Structure_of_a_library" for="toc">Structure of a library</h2>

    <p>Here is the structure of a library:</p>
    <ul>
      <li>sources at the root,</li>
      <li><code>Bin/</code>, for the binaries,</li>
      <li><code>Documentation/</code>, for <a href="@l#Hack_book">chapters of
      the hack book (documentation)</a>,</li>
      <li><code>Test/</code>, for the tests,</li>
      <li><code>README.md</code>, for an english description with usual
      examples,</li>
      <li><code>composer.json</code>, for the dependencies.</li>
    </ul>
    <p>Binaries are accessible via the command: <code>hoa
    <em>library</em>:<em>command</em></code>. For example, for
    <code>Hoa\Core\Bin\Resolve</code>, we will write: <code>hoa
    core:resolve</code>.</p>
    <p class="warning">For the moment, tests are under migration!<br /> Thank
    you for your patience.</p>

    <h2 id="Rush_Release" for="toc">Rüsh Release</h2>

    <p>Hoa uses a release system called <strong>Rüsh Release</strong>, standing
    for Rolling Ünd ScHeduled Release. This section explains this system, that,
    despites its appearence, is very close to what is daily met while answering
    to the particular needs of the Hoa project.</p>

    <h3 id="Development_and_maturation" for="toc">Development and
    maturation</h3>

    <p>During its life, a library goes through <strong>three different
    states</strong>:</p>
    <div id="library_states" class="schema"
         style="max-width: 550px; margin: 0 auto;"></div>
    <script>
    Hoa.Document.onReady(function ( ) {

        var paper = Hoa.Graph(Hoa.$('#library_states'), 550, 150);
        var grid  = paper.grid(0, 0, 550, 150, 3, 1);
        var step1 = grid.push(paper.rect(0, 0, 120, 90, 3, 'beta'));
        var step2 = grid.push(paper.rect(0, 0, 120, 90, 3, 'RC'));
        var step3 = grid.push(paper.rect(0, 0, 120, 90, 3, 'finalized'));

        paper.link.between(step1, step2);
        paper.link.between(step2, step3);
    });
    </script>
    <ol>
      <li>the <strong>beta</strong> state represents a library under
      <strong>development</strong>, under writing,</li>
      <li>the <strong>RC</strong> (standing for Release Candidate) represents a
      library with a frozen API, a <strong>mature</strong> code; it is
      therefore intensively tested by several users to <strong>try</strong> the
      code and its API; once validated, it goes to the next state,</li>
      <li>the <strong>finalized</strong> state represents a
      <strong>finalized</strong> library; then its release cycle can start.</li>
    </ol>

    <h3 id="Release_cycle" for="toc">Release cycle</h3>

    <p>Once a library has been finalized, its <strong>release cycle</strong> can
    start. Hoa uses a cycle called
    <a href="https://en.wikipedia.org/wiki/Rolling_release">Rolling Release</a>.
    It means that the main branch, <code>master</code>, permanently contains the
    <strong>latest version</strong>. No need to wait the release of a new
    version in order to have the latest security or performances fixes, or the
    latest new features: the main branch provides them
    <strong>immediately</strong>. (Detail: Hoa applies part- and true-rolling
    release).</p>
    <p>However, some softwares used to install Hoa do no take this approach into
    account, or this approach does not fit into all environments or usages.
    That's why Hoa also uses <strong>another release cycle</strong> called
    Scheduled-based Release. Rules are the following:</p>
    <ul>
      <li><strong>each 6 weeks</strong>, if at least one patch has been applied
      on the main branch, a new snapshot is created,</li>
      <li><strong>before 6 weeks</strong>, if at least one critical or
      significant patch has been applied, a new snapshot is created.</li>
    </ul>
    <p><strong>Snapshots</strong> take the form of tags in Git repositories.
    They have the following syntax:
    <code><em>x</em>.<em>Y</em><sup>{2,4}</sup>.<em>mm</em>.<em>dd</em></code>,
    where <code><em>x</em></code> is the master compatibility number (detailled
    hereinafter), <code><em>Y</em><sup>{2,4}</sup></code> is the year (starting
    from 2000, also called Rüsh Epoch), <code><em>mm</em></code> is the month
    and finally <code><em>dd</em></code> is the day.</p>
    <p>The <strong>master compatibility number</strong> (MCN) represents the
    number of time where the backward compatibility could not be ensured, in
    other words where it is not possible to apply an update without any risk (we
    also speak about backward compatibility break, BC). Before a library to
    reach the finalized state, its MCN is set to 0. Next, it is set to 1, then
    it increases when needed. For instance, the snapshot of the day could be
    <code>1.<value formatter="date" formatter-format="y.m.d" /></code>.</p>
    <p>Thus, to use the latest snapshot of the <code>Hoa\Websocket</code>
    library, you will have to write in your <code>composer.json</code> file:</p>
    <pre><code class="language-json">{
    "require": {
        "hoa/websocket": "~2.0"
    }
}</code></pre>
    <p>And to use the latest available version, you will have to write:</p>
    <pre><code class="language-json">{
    "require": {
        "hoa/websocket": "~2.0@dev"
    }
}</code></pre>
    <p>The <a href="https://getcomposer.org/doc/01-basic-usage.md#next-significant-release-tilde-operator-">tilde
    operator</a>, or the next significant release operator, in Composer is
    equivalent to <code>>=2.0,&amp;lt;3.0</code>, being the latest possible
    version for the same MCN.</p>

    <h3 id="PHP_versions" for="toc">PHP versions</h3>

    <p>Hoa supports <strong>all</strong> PHP versions greater or equal to the
    latest <strong>maintained</strong> version by the
    <a href="http://php.net/">PHP Group</a>. We talk about the lowest required
    PHP version (LRPV). Even if Hoa is compatible with older versions, libraries
    will not run on them deliberately. Consequently, each time a PHP version
    dies, it increases the MCN of each libraries.</p>
    <p>It is possible to know the LRPV by reading the
    <a href="http://central.hoa-project.net/Resource/Library/Core/composer.json"><code>composer.json</code>
    file</a> of <code>Hoa\Core</code>. Currently, Hoa supports all versions
    greater or equal to <strong>5.4</strong>.</p>

    <script src="hoa://Application/Public/Javascript/Hoa.Graph.js"></script>
    <script src="hoa://Application/Public/Javascript/Hoa.Graph.style.js"></script>
  </yield>
</overlay>
