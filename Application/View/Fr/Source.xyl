<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="hoa://Application/View/Shared/Definition/Code.xyl"?>
<?xyl-overlay href="hoa://Application/View/Shared/Overlay/Code.xyl"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
  <yield id="main_content">
    <h1>Sources</h1>

    <p>Hoa distribue les projets principaux suivants :</p>
    <ul>
      <li><code>Central</code> : l'ensemble de <strong>toutes</strong> les
      bibliothèques standards ;</li>
      <li><code>Library/<em>*</em></code> : bibliothèques
      <strong>standards</strong> isolées ;</li>
      <li><code>Hoathis/<em>*</em></code> : bibliothèques
      <strong>utilisateurs</strong> isolées (maintenues par Hoa).</li>
    </ul>
    <p>Il existe plusieurs façon d'installer Hoa : dans sa
    <strong>totalité</strong> (avec le central) ou <strong>en partie</strong>
    (choix des bibliothèques), et <strong>globalement</strong> (sur le système)
    ou <strong>localement</strong> (dans une application). Dans le cas d'une
    installation <strong>globale</strong> et pour les systèmes respectants le
    <a href="http://refspecs.linuxfoundation.org/fhs.shtml"><em lang="en">Filesystem
    Hierarchy Standard</em></a> (dans sa version 2.2 minimum), Hoa préfèrera
    s'installer dans le dossier <code>/usr/local/lib/Hoa/</code>. Pour les
    autres systèmes, comme par exemple Windows, Hoa préfèrera s'installer dans
    le dossier <code>C:\Program Files\Hoa\</code>.</p>

    <h2 id="Table_of_contents">Table des matières</h2>

    <tableofcontents id="toc" />

    <h2 id="Dependency_manager_(Composer)" for="toc">Gestionnaire de dépendances
    (Composer)</h2>

    <p><img src="hoa://Application/Public/Image/Logo/Composer.png"
            alt="Logo de Composer" class="fright" />
    Pour gérer les dépendances entre les bibliothèques de Hoa, nous
    recommandons l'outil <a href="http://getcomposer.org/">Composer</a>. Toutes
    les dépendances gérées avec Composer sont enregistrées auprès du dépôt
    <a href="https://packagist.org/search/?q=hoa/">Packagist</a> sous les noms
    <code>hoa/<em>library</em></code> et <code>hoathis/<em>library</em></code>.
    Ainsi, par exemple, pour installer la bibliothèque
    <code>Hoa\Websocket</code>, il faudra écrire dans un fichier
    <code>composer.json</code> :</p>
    <pre><code class="language-json">{
    "require": {
        "hoa/websocket": "~2.0"
    }
}</code></pre>
    <p>Puis pour installer les dépendances :</p>
    <pre><code class="language-shell">$ composer install</code></pre>
    <p>Il est recommandé de <a href="https://getcomposer.org/doc/">lire la
    documentation de Composer</a> si vous n'êtes pas familier avec cet outil.</p>
    <p>Pour tester que l'installation s'est bien déroulée :</p>
    <pre><code class="language-php">&amp;lt;?php

require_once 'vendor/autoload.php';
var_dump(HOA); // bool(true)</code></pre>

    <h2 id="Version_manager_(Git)" for="toc">Gestionnaire de versions (Git)</h2>

    <p><img src="hoa://Application/Public/Image/Logo/Git.png" alt="Logo de Git"
            class="fright" />
    Hoa utilise <a href="http://git-scm.com/">Git</a> pour tous ses projets.
    L'index des dépôts se trouve à l'adresse :
    <a href="http://git.hoa-project.net">git.hoa-project.net</a>. Les dépôts
    sont nommés <code><em>project</em>.git</code>. Ainsi, pour
    obtenir les sources du projet <code>Central</code> :</p>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Central.git Hoa.central</code></pre>
    <p>Pour obtenir une bibliothèque, par exemple <code>Hoa\Core</code> :</p>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Library/Core.git Hoa/Core</code></pre>
    <p>Il est recommandé de <a href="http://git-scm.com/documentation">lire la
    documentation de Git</a> si vous n'êtes pas familier avec cet outil.</p>
    <p>Si vous souhaitez une installation globale et totale avec le central,
    tout en respectant la recommandation sur la localisation de Hoa, vous
    pourrez utiliser un lien symbolique :</p>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Central.git /usr/local/lib/Hoa.central
$ ln -s /usr/local/lib/Hoa.central/Hoa /usr/local/lib/Hoa</code></pre>
    <p><img src="hoa://Application/Public/Image/Logo/Pikacode.png"
           alt="Logo de Pikacode" class="fright" />
       <img src="hoa://Application/Public/Image/Logo/Github.png"
           alt="Logo de Github" class="fright" />
    Des miroirs existent pour la plupart des projets, notamment sur
    <a href="@github">Github</a> et
    <a href="https://pikacode.com/hoaproject/">Pikacode</a>. Les noms des
    projets sont identiques autant que possible. La plus grosse différence est
    pour les bibliothèques : l'accès se fait sans le préfixe
    <code>Library/</code> ou alors <code>Hoathis/</code> est remplacé par
    <code>Hoathis-</code>. Ainsi :</p>
    <pre><code class="language-shell">$ git clone https://github.com/hoaproject/Core.git</code></pre>
    <p>Les miroirs sont en permanence synchronisés, vous n'aurez jamais de
    différences.</p>
    <p>Pour tester que l'installation s'est bien déroulée :</p>
    <pre><code class="language-php">&amp;lt;?php

require_once '/usr/local/lib/Hoa/Core/Core.php';
var_dump(HOA); // bool(true)</code></pre>

    <h2 id="Archives" for="toc">Archives</h2>

    <p>Des archives sont produites à chaque mise à jour de certains projets.
    L'index des archives se trouve à l'adresse :
    <a href="http://download.hoa-project.net">download.hoa-project.net</a>.
    Elles suivent également le nommage des projets. Plusieurs formats sont
    disponibles : <code>.zip</code>, <code>.tar.gz</code> et
    <code>.phar</code> (pour <a href="http://php.net/phar">les archives
    PHP</a>).</p>
    <p>Le protocole WebDAV permet également d'accéder aux archives, à
    l'adresse : <a href="http://dav.hoa-project.net">dav.hoa-project.net</a>.</p>

    <h2 id="Structure_of_a_library" for="toc">Structure d'une bibliothèque</h2>

    <p>Voici la structure d'une bibliothèque :</p>
    <ul>
      <li>sources à la racine ;</li>
      <li><code>Bin/</code>, pour les binaires ;</li>
      <li><code>Documentation/</code>, pour <a href="@literature#Hack_book">les
      chapitres du <em lang="en">hack book</em> (documentation)</a> ;</li>
      <li><code>Test/</code>, pour les tests ;</li>
      <li><code>README.md</code>, pour une description en anglais avec des
      exemples usuels ;</li>
      <li><code>composer.json</code>, pour les dépendances.</li>
    </ul>
    <p>Les binaires sont accessibles via la commande : <code>hoa
    <em>library</em>:<em>command</em></code>. Par exemple, pour
    <code>Hoa\Core\Bin\Resolve</code>, nous écrirons :
    <code>hoa core:resolve</code>.</p>
    <p class="warning">Actuellement, les tests sont en cours de migration !
    <br />
    Merci d'être patient.</p>

    <h2 id="Rush_Release" for="toc"><em lang="en">Rush Release</em></h2>

    <p>Hoa utilise un système de <em lang="en">release</em> appelé
    <strong><em lang="en">Rush Release</em></strong>, pour <em lang="en">Rolling
    Und ScHeduled Release</em>. Cette section explique ce système, qui, malgré
    les apparences, est très proche de ce qui est rencontré au quotidien mais
    répond aux besoins particuliers du projet Hoa.</p>

    <h3 id="Development_and_maturation" for="toc">Élaboration et maturation</h3>

    <p>Lors de sa vie, une bibliothèque passe dans <strong>trois états</strong>
    différents :</p>
    <div id="library_states" class="schema"
         style="max-width: 550px; margin: 0 auto;"></div>
    <script>
    Hoa.Document.onReady(function ( ) {

        var paper = Hoa.Graph(Hoa.$('#library_states'), 550, 150);
        var grid  = paper.grid(0, 0, 550, 150, 3, 1);
        var step1 = grid.push(paper.rect(0, 0, 120, 90, 3, 'beta'));
        var step2 = grid.push(paper.rect(0, 0, 120, 90, 3, 'RC'));
        var step3 = grid.push(paper.rect(0, 0, 120, 90, 3, 'finalized'));

        paper.link.between(step1, step2);
        paper.link.between(step2, step3);
    });
    </script>
    <ol>
      <li>l'état <strong><em lang="en">beta</em></strong> représente une
      bibliothèque en cours d'<strong>élaboration</strong>, d'écriture, de
      développement ;</li>
      <li>l'état <strong><em lang="en">RC</em></strong> (pour
      <em lang="en">Release Candidate</em>) représente une bibliothèque avec une
      API fixe, un code <strong>abouti</strong> et <strong>mature</strong> ;
      elle est alors intensivement testée par plusieurs utilisateurs pour
      <strong>éprouver</strong> son code et son API ; une fois validée, elle
      passe dans l'état suivant ;</li>
      <li>l'état <strong><em lang="en">finalized</em></strong> représente une
      bibliothèque <strong>finalisée</strong> ; son cycle de
      <em lang="en">release</em> peut alors commencer.</li>
    </ol>

    <h3 id="Release_cycle" for="toc">Cycle de <em lang="en">release</em></h3>

    <p>Une fois une bibliothèque finalisée, son <strong>cycle de
    <em lang="en">release</em></strong> peut commencer. Hoa utilise un cycle
    appelé
    <a href="https://fr.wikipedia.org/wiki/Rolling_release"><em lang="en">Rolling
    Release</em></a>. Cela signifie que la branche principale,
    <code>master</code>, contient en permanence la <strong>dernière
    version</strong>. Pas besoin d'attendre la sortie d'une nouvelle
    version pour avoir les derniers correctifs de sécurité, de performances
    ou les dernières nouveautés : la branche principale les propose tout de
    suite, <strong>sans attente</strong>. (Détail : Hoa applique du
    <em lang="en">part-</em> et <em lang="en">true-rolling release</em>).</p>
    <p>Toutefois, certains logiciels permettant d'installer Hoa ne comprennent
    pas cette approche, ou alors elle ne convient pas à tous les environnements
    de développement ou contextes d'utilisation. C'est pourquoi, Hoa utilise
    également un <strong>autre cycle</strong> de <em lang="en">release</em>
    appelé <em lang="en">Scheduled-based Release</em>. Les règles sont les
    suivantes :</p>
    <ul>
      <li><strong>chaque 6 semaines</strong>, si au moins un patch a été
      appliqué dans la branche principale, un nouveau
      <em lang="en">snapshot</em> est créé ;</li>
      <li><strong>avant 6 semaines</strong>, si au moins un patch critique ou
      significatif a été appliqué, un nouveau <em lang="en">snapshot</em> est
      créé.</li>
    </ul>
    <p>Les <strong><em lang="en">snapshots</em></strong> prennent la forme de
    <em lang="en">tags</em> dans les dépôts Git. Ils ont le format suivant :
    <code><em>x</em>.<em>Y</em><sup>{2,4}</sup>.<em>mm</em>.<em>dd</em></code>,
    où <code><em>x</em></code> est le <em lang="en">master compatibility
    number</em> (détaillé ci-après), <code><em>Y</em><sup>{2,4}</sup></code> est
    l'année (à partir de l'année 2000, aussi appelée <em lang="en">Rush
    Epoch</em>), <code><em>mm</em></code> est le mois et enfin
    <code><em>dd</em></code> le jour.</p>
    <p>Le <strong><em lang="en">master compatibility number</em></strong> (MCN)
    représente le nombre de fois où la compatibilité descendante n'a pas pu être
    assurée, autrement dit où il n'est pas possible de faire une mise à jour
    sans aucun risque (nous parlons aussi de <strong><em lang="en">backward
    compatibility break</em></strong>, <em lang="en">BC break</em>). Avant
    qu'une bibliothèque atteigne l'état <em lang="en">finalized</em>, son MCN
    est défini à 0. Ensuite, il est défini à 1, puis il augmente au besoin. Par
    exemple, le <em lang="en">snapshot</em> du jour pourrait être
    <code>1.<value formatter="date" formatter-format="y.m.d" /></code>.</p>
    <p>Ainsi, pour utiliser le dernier <em lang="en">snapshot</em> de la
    bibliothèque <code>Hoa\Websocket</code>, il faudra écrire dans votre fichier
    <code>composer.json</code> :</p>
    <pre><code class="language-json">{
    "require": {
        "hoa/websocket": "~2.0"
    }
}</code></pre>
    <p>Et pour utiliser la dernière version disponible, il faudra écrire :</p>
    <pre><code class="language-json">{
    "require": {
        "hoa/websocket": "~2.0@dev"
    }
}</code></pre>
    <p>L'<a href="https://getcomposer.org/doc/01-basic-usage.md#next-significant-release-tilde-operator-">opérateur
    tilde</a>, ou opérateur de la prochaine <em lang="en">release</em>
    significative, dans Composer équivaut ici à <code>>=2.0,&amp;lt;3.0</code>,
    soit la dernière version possible pour le même MCN.</p>

    <h3 id="PHP_versions" for="toc">Versions de PHP</h3>

    <p>Hoa supporte <strong>toutes</strong> les versions de PHP supérieures ou
    égales à la dernière version <strong>maintenue</strong> par le
    <a href="http://php.net/"><em lang="en">PHP Group</em></a>. Nous parlons de
    <strong><em lang="en">lowest required PHP version</em></strong> (LRPV). Même
    si Hoa est compatible avec des versions plus anciennes, les bibliothèques ne
    s'y exécuteront volontairement pas. Par conséquent, chaque fois qu'une
    version de PHP meurt, cela augmente le MCN de chaque bibliothèque.</p>
    <p>Il est possible de connaître la LRPV en lisant le
    <a href="http://central.hoa-project.net/Resource/Library/Core/composer.json">fichier
    <code>composer.json</code> de <code>Hoa\Core</code></a>. Actuellement, Hoa
    supporte toutes les versions supérieures ou égales à
    <strong>5.4</strong>.</p>
  </yield>

  <yield id="scripts">
    <script src="hoa://Application/Public/Javascript/Hoa.Graph.js"></script>
    <script src="hoa://Application/Public/Javascript/Hoa.Graph.style.js"></script>
  </yield>
</overlay>
